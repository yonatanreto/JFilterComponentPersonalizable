/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.nextic.filtercomponent.components;

import java.awt.AWTEvent;
import java.awt.Color;
import java.awt.Component;
import java.awt.EventQueue;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.InputEvent;
import java.awt.event.KeyEvent;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.Serializable;
import java.util.List;
import javax.swing.JLabel;
import javax.swing.JTextField;
import javax.swing.ListSelectionModel;
import javax.swing.RowFilter;
import javax.swing.event.ListSelectionEvent;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import org.jdesktop.swingx.painter.CompoundPainter;
import org.jdesktop.swingx.painter.GlossPainter;
import org.jdesktop.swingx.painter.MattePainter;
import org.jdesktop.swingx.painter.PinstripePainter;
//import sun.swing.table.DefaultTableCellHeaderRenderer;

/**
 *
 * @author Yonatan
 */
public class JFilterComponent2 extends javax.swing.JPanel implements Serializable {

    /**
     * Creates new form JFilterComponent
     */
   private static final long serialVersionUID = 41L;
     private ListSelectionModel filter_select;
    private MiTableRowSorter filter_sorter=null;
        private DefaultTableModel filter_mt;
    private List datos=null;
    private AbstractCodigo dato=null;
    private  Component next_component=null;
    private  JTextField auxiliar_component=null;
    private String colum_1="Código";
    private String colum_2="Nombre";
     private String mensaje="";
    
    public JFilterComponent2() {
        initComponents();
        personalizarTabla();
        this.crear_tabla_centroc();
        this.filter_popup.add(panel_filter);
    }
    
    public JFilterComponent2(String colum_1,String colum_2) {
        this.colum_1=colum_1;
        this.colum_2=colum_2;
        initComponents();
        personalizarTabla();
        this.crear_tabla_centroc();
        this.filter_popup.add(panel_filter);
    }

     @Override
    public void setEnabled(boolean enabled) {
       this.filter_campo.setEnabled(enabled);
       this.jButton1.setEnabled(enabled);
    }
 
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panel_filter = new org.jdesktop.swingx.JXPanel();
        jLabel3 = new javax.swing.JLabel();
        filter_busqueda = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        filter_tabla = new MiTabla();
        jSeparator1 = new javax.swing.JSeparator();
        filter_popup = new javax.swing.JPopupMenu();
        filter_campo = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();

        panel_filter.setBackground(new java.awt.Color(255, 255, 255));
        panel_filter.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel3.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        jLabel3.setText("Busqueda:");
        jLabel3.setForeground(new java.awt.Color(153, 153, 153));
        panel_filter.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 15, -1, -1));

        filter_busqueda.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        filter_busqueda.setBorder(null);
        filter_busqueda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filter_busquedaActionPerformed(evt);
            }
        });
        filter_busqueda.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                filter_busquedaKeyReleased(evt);
            }
        });
        panel_filter.add(filter_busqueda, new org.netbeans.lib.awtextra.AbsoluteConstraints(71, 8, 227, -1));

        jScrollPane3.setBackground(new java.awt.Color(255, 255, 255));
        jScrollPane3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(229, 229, 229)));
        jScrollPane3.setForeground(new java.awt.Color(84, 84, 84));

        filter_tabla.setBackground(new java.awt.Color(226, 226, 226));
        filter_tabla.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        filter_tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Código", "Nombre"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        filter_tabla.setForeground(new java.awt.Color(84, 84, 84));
        filter_tabla.setGridColor(new java.awt.Color(234, 234, 234));
        filter_tabla.setShowVerticalLines(false);
        jScrollPane3.setViewportView(filter_tabla);

        panel_filter.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 39, 444, 130));
        panel_filter.add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 32, 227, 2));

        setBackground(new java.awt.Color(255, 255, 255));

        filter_campo.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        filter_campo.setBorder(null);
        filter_campo.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        filter_campo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                filter_campoFocusLost(evt);
            }
        });
        filter_campo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filter_campoActionPerformed(evt);
            }
        });
        filter_campo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                filter_campoKeyReleased(evt);
            }
        });

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/nextic/filtercomponent/components/images/icon_filter2.png"))); // NOI18N
        jButton1.setBorder(null);
        jButton1.setDisabledIcon(new javax.swing.ImageIcon(getClass().getResource("/com/nextic/filtercomponent/components/images/icon_filter_disabled.png"))); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(filter_campo, javax.swing.GroupLayout.DEFAULT_SIZE, 139, Short.MAX_VALUE)
                .addGap(0, 0, 0)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(filter_campo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    
    
    public void llenar_filter(List <AbstractCodigo>datos){
        this.datos=datos;
       // List <CentroCostos> l=ma.listarTodosLosCentroCostos();
        dato=null;
        if(this.auxiliar_component!=null){
            auxiliar_component.setText("");
        }
        filter_campo.setText(mensaje);
        getFilter_mt().getDataVector().removeAllElements();
        //centroc_tabla.updateUI();
        filter_tabla.repaint();
        setFilter_sorter(new MiTableRowSorter(getFilter_mt()));
        filter_tabla.setRowSorter(getFilter_sorter());
        for(int i=0;i<this.datos.size();i++){            
            getFilter_mt().addRow(new Object[]{datos.get(i).getCodigo_abs(),datos.get(i).getNombre_abs()});
        }
     }
    private void filter_busquedaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_filter_busquedaKeyReleased
        // TODO add your handling code here:
        try {
            int c = evt.getKeyCode();
            if (c == KeyEvent.VK_ESCAPE) {
                filter_popup.setVisible(false);
                //jt_nombre.setText("");
                this.filter_campo.requestFocus();
                  lanzarEvento2();
            } else {
                if ((c == KeyEvent.VK_DOWN || c == KeyEvent.VK_UP)&&(getFilter_mt().getRowCount()>0) /*  * || c==KeyEvent.VK_TAB*/) {
                    if (this.getFilter_select().isSelectionEmpty()) {
                        filter_tabla.setRowSelectionInterval(filter_tabla.convertRowIndexToView(filter_tabla.convertRowIndexToModel(0)),
                                filter_tabla.convertRowIndexToView(filter_tabla.convertRowIndexToModel(0)));
                    }else{
                        int fila = getFilter_select().getLeadSelectionIndex();
                        fila = filter_tabla.convertRowIndexToView(fila);
                        //System.out.println(fila);
                        if (c == KeyEvent.VK_UP) {
                            filter_tabla.setRowSelectionInterval(filter_tabla.convertRowIndexToView(filter_tabla.convertRowIndexToModel(fila - 1)),
                                    filter_tabla.convertRowIndexToView(filter_tabla.convertRowIndexToModel(fila - 1)));
                        } else {
                            if (c == KeyEvent.VK_DOWN) {
                                filter_tabla.setRowSelectionInterval(filter_tabla.convertRowIndexToView(filter_tabla.convertRowIndexToModel(fila + 1)),
                                        filter_tabla.convertRowIndexToView(filter_tabla.convertRowIndexToModel(fila + 1)));
                            }
                        }
                    }
                    filter_tabla.requestFocus();
                } else {
                    String s = this.filter_busqueda.getText().trim().toLowerCase();
                    getFilter_sorter().setRowFilter(RowFilter.regexFilter("(?i)" + s));
                    /*
                     * mitable.setRowSelectionInterval(mitable.convertRowIndexToView(mitable.convertRowIndexToModel(0)),
                                mitable.convertRowIndexToView(mitable.convertRowIndexToModel(0)));
                     */
                }
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_filter_busquedaKeyReleased

     public void lanzarEvento2(){
firePropertyChange();

}
    
//Metodos para lanzar action listener
    @Override
    public synchronized void addPropertyChangeListener(PropertyChangeListener l) {
        listenerList.add(PropertyChangeListener.class, l);
    }

   

   
    protected void firePropertyChange() {
        // Guaranteed to return a non-null array
        Object[] listeners = listenerList.getListenerList();
        int modifiers = 0;
        AWTEvent currentEvent = EventQueue.getCurrentEvent();
        if (currentEvent instanceof InputEvent) {
            modifiers = ((InputEvent)currentEvent).getModifiers();
        } else if (currentEvent instanceof ActionEvent) {
            modifiers = ((ActionEvent)currentEvent).getModifiers();
        }
        PropertyChangeEvent e = new PropertyChangeEvent(this,"perdidadefoco",0,0);

        // Process the listeners last to first, notifying
        // those that are interested in this event
        for (int i = listeners.length-2; i>=0; i-=2) {
            if (listeners[i]==PropertyChangeListener.class) {
                ((PropertyChangeListener)listeners[i+1]).propertyChange(e);
            }
        }
    }    
    
public void lanzarEvento(){
fireActionPerformed();

}
//Metodos para lanzar action listener
public synchronized void addActionListener(ActionListener l) {
        listenerList.add(ActionListener.class, l);
    }
 public  void personalizarTabla(){
         
         JTableHeader jTableHeader;
         jTableHeader = filter_tabla.getTableHeader();         
         jTableHeader.setForeground( new java.awt.Color(100, 100, 100));  //  new java.awt.Color(52, 133, 254)
         jTableHeader.setFont(new java.awt.Font("Calibri", 1, 17));
         jTableHeader.setSize(jTableHeader.getWidth(),14);
         
         ((DefaultTableCellRenderer)jTableHeader.getDefaultRenderer()).setHorizontalAlignment(JLabel.CENTER);
         filter_tabla.setRowHeight(22);
         

        
     
     }
 protected void fireActionPerformed() {
        // Guaranteed to return a non-null array
        Object[] listeners = listenerList.getListenerList();
        int modifiers = 0;
        AWTEvent currentEvent = EventQueue.getCurrentEvent();
        if (currentEvent instanceof InputEvent) {
            modifiers = ((InputEvent)currentEvent).getModifiers();
        } else if (currentEvent instanceof ActionEvent) {
            modifiers = ((ActionEvent)currentEvent).getModifiers();
        }
        ActionEvent e = new ActionEvent(this, ActionEvent.ACTION_PERFORMED,"Evento JFilterComponent",EventQueue.getMostRecentEventTime(), modifiers);

        // Process the listeners last to first, notifying
        // those that are interested in this event
        for (int i = listeners.length-2; i>=0; i-=2) {
            if (listeners[i]==ActionListener.class) {
                ((ActionListener)listeners[i+1]).actionPerformed(e);
            }
        }
    }

     public void crear_tabla_centroc(){


        setFilter_mt((DefaultTableModel) filter_tabla.getModel());

        filter_tabla.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        
        filter_tabla.getColumnModel().getColumn(0).setHeaderValue(colum_1);
        filter_tabla.getColumnModel().getColumn(1).setHeaderValue(colum_2);
        filter_tabla.getColumnModel().getColumn(0).setPreferredWidth(30);
        filter_tabla.getColumnModel().getColumn(1).setPreferredWidth(250);
        setFilter_select(filter_tabla.getSelectionModel());
        getFilter_select().addListSelectionListener(new javax.swing.event.ListSelectionListener() {
                @Override
                public void valueChanged(ListSelectionEvent e) {
                    ListSelectionModel lsm = (ListSelectionModel)e.getSource();
                    if (!lsm.isSelectionEmpty()&&filter_popup.isVisible()) {
                        int filaselect=lsm.getLeadSelectionIndex();
                        filaselect=filter_tabla.convertRowIndexToModel(filaselect);
                        filter_campo.setText(getFilter_mt().getValueAt(filaselect,0).toString());
                        //setDato(getFilter_mt().getValueAt(filaselect,1));
                        setDato((AbstractCodigo)datos.get(filaselect));
                        if(getAuxiliar_component()!=null){
                           getAuxiliar_component().setText(getDato().getNombre_abs());
                        }
                        lanzarEvento();
                        
                        //filter_cadena=filter_mt.getValueAt(filaselect,0).toString();
                     
                        
                    }
                }
            });
        filter_tabla.addMouseListener(new java.awt.event.MouseAdapter(){
                @Override
                public void mousePressed(java.awt.event.MouseEvent me){
                  if(me.getClickCount()==1){

                      filter_popup.setVisible(false);
                      if( getNext_component()!=null){
                     getNext_component().requestFocus();
                      }else{
                      filter_campo.requestFocus();
                      }
                      lanzarEvento2();
                  }
              }
            }
        );
        filter_tabla.addKeyListener(new java.awt.event.KeyAdapter(){
                @Override
          public void keyPressed(java.awt.event.KeyEvent e){
             int k=e.getKeyCode();
              if(k==java.awt.event.KeyEvent.VK_BACK_SPACE || k==KeyEvent.VK_TAB){
                 filter_busqueda.requestFocus();
              }
              if(k==java.awt.event.KeyEvent.VK_ENTER){
                 //rowSM.clearSelection();
                filter_popup.setVisible(false);
                 if( getNext_component()!=null){
                    getNext_component().requestFocus();
                 }else{
                filter_campo.requestFocus();
              }
                 lanzarEvento2();
                  System.out.println("Evento foco a boton");
              }
              if(k==java.awt.event.KeyEvent.VK_ESCAPE){
                filter_popup.setVisible(false);
                //procesoBuscar_centroc();

                filter_campo.requestFocus();
                lanzarEvento2();
              }

          }

          public void keyRelessed(java.awt.event.KeyEvent e){
          }
                @Override
          public void keyTyped(java.awt.event.KeyEvent e){
              char c=e.getKeyChar();
              int k=e.getKeyCode();
              if(Character.isLetterOrDigit(c)|| c=='.'){
                filter_busqueda.requestFocus();
                String s=filter_busqueda.getText();
                filter_busqueda.setText(s+c);
              }
          }
        });
        this.jScrollPane3.getVerticalScrollBar().setFocusable(false);
        this.jScrollPane3.setFocusable(false);
        //filter_tabla.getColumnModel().getColumn(0).setPreferredWidth(40);
        //filter_tabla.getColumnModel().getColumn(1).setPreferredWidth(240);
        setFilter_sorter(new MiTableRowSorter(getFilter_mt()));
        filter_tabla.setRowSorter(getFilter_sorter());

       }
    
     public void procesoBuscar_filter(){
        try {

           


        } catch (Exception ex) {
            ex.printStackTrace();
        }

    }
    private void filter_campoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_filter_campoKeyReleased
        // TODO add your handling code here:
         if(evt.getKeyCode()==evt.VK_SPACE){
            try {
               if(getFilter_select()!=null){
                    getFilter_select().clearSelection();
                }
                System.out.println("entro");
                filter_popup.show(filter_campo,filter_campo.getX(),filter_campo.getY()+21);
                //centroc_popup.setVisible(t)
                //this.jl_nounid.setVisible(false);
                filter_busqueda.setText("");
                getFilter_sorter().setRowFilter(RowFilter.regexFilter("(?i)"+""));
                filter_busqueda.requestFocus();
                //}
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        }
          if(evt.getKeyCode()==evt.VK_ENTER){
              
          }
          
    }//GEN-LAST:event_filter_campoKeyReleased

    private void filter_campoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filter_campoActionPerformed
        // TODO add your handling code here:
        
        if(filter_campo.getText().equalsIgnoreCase("")){
            
           filter_campo.setText(mensaje);      
           dato=null;
           
            if(this.auxiliar_component!=null){
                auxiliar_component.setText("");
            }
            this.lanzarEvento();
        }else{
         
            for (int i = 0; i<getDatos().size(); i++) {
               AbstractCodigo ac=(AbstractCodigo) getDatos().get(i);
               if(ac.getCodigo_abs().equalsIgnoreCase(filter_campo.getText().trim())){
                    setDato(ac);
                if(getAuxiliar_component()!=null){
                    getAuxiliar_component().setText(getDato().getNombre_abs());
                }
                this.lanzarEvento();
                break;
               }
            }
        
        }
        if( this.getNext_component()!=null){
        this.getNext_component().requestFocus();
        }
    }//GEN-LAST:event_filter_campoActionPerformed

    private void filter_campoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_filter_campoFocusLost
        // TODO add your handling code here:
        
        if(this.dato==null){
          filter_campo.setText(mensaje);         
        }else{
         filter_campo.setText(((AbstractCodigo)dato).getCodigo_abs()); 
        }
    }//GEN-LAST:event_filter_campoFocusLost

    public void reiniciar(){
      this.dato=null;
      //this.datos=null;
      this.filter_campo.setText(mensaje);
      if(this.auxiliar_component!=null){
        auxiliar_component.setText("");
      }
    
    }
    private void filter_busquedaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filter_busquedaActionPerformed
        // TODO add your handling code here:
         try {
            if(filter_sorter.getViewRowCount()>0){
                filter_select.clearSelection();
                filter_tabla.requestFocus();
                filter_tabla.setRowSelectionInterval(filter_tabla.convertRowIndexToView(filter_tabla.convertRowIndexToModel(0)),
                        filter_tabla.convertRowIndexToView(filter_tabla.convertRowIndexToModel(0)));
            }
        }catch (Exception e) {
            System.out.println(e);
        }
    }//GEN-LAST:event_filter_busquedaActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
          System.out.println(" evento"+evt.getActionCommand()); 
        try {
             if(!filter_popup.isVisible()){
                if(getFilter_select()!=null){
                    getFilter_select().clearSelection();
                }                
                filter_popup.show(filter_campo,filter_campo.getX(),filter_campo.getY()+21);
                //centroc_popup.setVisible(t)
                //this.jl_nounid.setVisible(false);
                filter_busqueda.setText("");
                getFilter_sorter().setRowFilter(RowFilter.regexFilter("(?i)"+""));
                filter_busqueda.requestFocus();
             }else{
                filter_popup.setVisible(false);
                lanzarEvento2();
             }
                //}
            } catch (Exception ex) {
                ex.printStackTrace();
            }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void filter_campoActionPerformed1(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filter_campoActionPerformed1
        // TODO add your handling code here:
        filter_campoActionPerformed(evt);
    }//GEN-LAST:event_filter_campoActionPerformed1

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField filter_busqueda;
    public javax.swing.JTextField filter_campo;
    public javax.swing.JPopupMenu filter_popup;
    private javax.swing.JTable filter_tabla;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private org.jdesktop.swingx.JXPanel panel_filter;
    // End of variables declaration//GEN-END:variables

    /**
     * @return the datos
     */
    public List getDatos() {
        return datos;
    }

    /**
     * @param datos the datos to set
     */
    public void setDatos(List datos) {
        this.datos = datos;
    }
     public javax.swing.JTextField getFilter_campo() {
        return filter_campo;
    }
    /**
     * @return the dato
     */
    public AbstractCodigo getDato() {
        return dato;
    }

    /**
     * @param dato the dato to set
     */
    public void setDato(AbstractCodigo dato) {
        this.dato = dato;
        
         if(getAuxiliar_component()!=null){
                           getAuxiliar_component().setText(getDato().getNombre_abs());
         }    
         filter_campo.setText(getDato().getCodigo_abs());
    }

    /**
     * @return the filter_select
     */
    public ListSelectionModel getFilter_select() {
        return filter_select;
    }

    /**
     * @param filter_select the filter_select to set
     */
    public void setFilter_select(ListSelectionModel filter_select) {
        this.filter_select = filter_select;
    }

    /**
     * @return the filter_sorter
     */
    public MiTableRowSorter getFilter_sorter() {
        return filter_sorter;
    }

    /**
     * @param filter_sorter the filter_sorter to set
     */
    public void setFilter_sorter(MiTableRowSorter filter_sorter) {
        this.filter_sorter = filter_sorter;
    }

    /**
     * @return the filter_mt
     */
    public DefaultTableModel getFilter_mt() {
        return filter_mt;
    }

    /**
     * @param filter_mt the filter_mt to set
     */
    public void setFilter_mt(DefaultTableModel filter_mt) {
        this.filter_mt = filter_mt;
    }

    /**
     * @return the next_component
     */
    public Component getNext_component() {
        return next_component;
    }

    /**
     * @param next_component the next_component to set
     */
    public void setNext_component(Component next_component) {
        this.next_component = next_component;
    }

    /**
     * @return the auxiliar_component
     */
    public JTextField getAuxiliar_component() {
        return auxiliar_component;
    }

    /**
     * @param auxiliar_component the auxiliar_component to set
     */
    public void setAuxiliar_component(JTextField auxiliar_component) {
        this.auxiliar_component = auxiliar_component;
    }

    /**
     * @return the mensaje
     */
    public String getMensaje() {
        return mensaje;
    }

    /**
     * @param mensaje the mensaje to set
     */
    public void setMensaje(String mensaje) {
        this.mensaje = mensaje;
    }

   
}
